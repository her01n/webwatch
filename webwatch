#!/usr/bin/ruby

require 'fileutils'
require 'securerandom'

start = Time.now()

def env(name, default)
    value = ENV[name]
    if value and value != "" then value else default end
end 
version = "0.1"
config = env("WEBWATCH_CONFIG", "/etc/webwatch.config")
dest = env("WEBWATCH_DEST", "/var/lib/webwatch")

# Read configuration file
$urls = []
$admin = nil
$smpt_host = nil
$smtp_user = nil
$smtp_password = nil
begin
  n = 0
  File.readlines(config).each do |line|
    n = n + 1
    if line =~ /^\s*$/ then
    elsif line =~ /^\s*#/ then
    elsif line =~ /^\s*url\s*=\s*(.*)\s*$/ then
      $urls << $1
    elsif line =~ /^\s*admin\s*=\s*(.*)\s*$/ then
      $admin = $1
    elsif line =~ /^\s*smtp-host\s*=\s*(.*)\s*$/ then
      $smtp_host = $1
    elsif line =~ /^\s*smtp-user\s*=\s*(.*)\s*$/ then
      $smtp_user = $1
    elsif line =~ /^\s*smtp-password\s*=\s*(.*)\s*$/ then
      $smtp_password = $1
    else
      raise "parse error on line #{n}"
    end
  end
  if $urls == [] then
    raise "no urls specified"
  end
rescue => e
  print "read configuration file #{config}: #{e.message}\n"
  raise e
end
print "read configuration file #{config}: ok\n"

# Send email
def send_mail(file)
  if not $admin or $admin == "" then
    print "not sending mail because admin email is not configured\n"
  else 
    print "sending mail to #{$admin}\n"
    pass_file = "/tmp/webwatch#{SecureRandom.hex(6)}.password"
    File.open(pass_file, "w", 0600) do |file|
      file.write("#{$smtp_password}\n")
    end
    mail_file = "/tmp/webwatch#{SecureRandom.hex(6)}.mail"
    File.open(mail_file, "w", 0600) do |file|
      file.write("To: #{$admin}\n")
      file.write("From: #{$smtp_user}\n")
      file.write("Subject: Webwatch Test Failure\n")
      file.write("\n")
      file.write(File.read(file))
    end
    system("cat #{mail_file} | msmtp --from=#{$smtp_user} --auth --tls \"--host=#{$smtp_host}\" \"--user=#{$smtp_user}\" \"--passwordeval=cat #{pass_file}\" #{$admin}")
    File.delete pass_file
    File.delete mail_file
  end
end

if ARGV[0] == "--test-mail" then
  File.write("/tmp/testmail", "This is a test email")
  send_mail("/tmp/testmail")
  exit(0)
end

# Execute tests
success = 0
failures = []
out = "/tmp/webwatch#{SecureRandom.hex(6)}.out"
FileUtils.mkdir_p dest
File.open("#{dest}/log", "a") do |log|
  $urls.each do |url|
    print "testing #{url} ..."
    if not system("curl --fail --location #{url} --silent --show-error 2>#{out} >#{out}") then
      log.puts "#{Time.now()} failure #{url}"
      print " failed\n"
      failures << { url: url, output: File.read(out) }
    else
      log.puts "#{Time.now()} success #{url}"
      success = success + 1
      print " ok\n"
    end
  end
end
File.delete(out)
done = Time.now()

# Write report file
status = "#{dest}/status"
print "writing status to #{status}\n"
def tests(n)
  "#{n} #{n == 1 ? "test" : "tests"}"
end
File.open(status, "w") do |file|
  file.write("Webwatch version #{version}\n")
  file.write("Test started at #{start}.\n");
  file.write("Time elapsed %.2f seconds.\n" % (done - start))
  if failures.empty? then
    file.write("#{tests(success)} OK.\n")
  else
    file.write("#{tests(failures.length)} failed.\n")
    failures.each do |failure|
      file.write("\n")
      file.write("URL: #{failure[:url]}\n")
      file.write("Output:\n")
      file.write(failure[:output])
    end
  end
end


# Send the mail in case of failure
if not failures.empty? then
  send_mail(status)
end

# TODO
# Synchronize the logs with remote site if specified
# remote = begin File.read("#{config}/remote").chomp rescue "" end
# if remote != "" then
#   print "uploading output"
#   system("rsync --archive --update #{dest}/ #{remote}")
#end

